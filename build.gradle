import com.github.jengelman.gradle.plugins.shadow.relocation.Relocator
import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer
import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.1'
    }
}

plugins {
    id 'java'
}

group 'com.colinparrott'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}


test {
    testLogging {
        events "skipped", "failed"
        exceptionFormat "full"
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile 'uk.com.robust-it:cloning:1.9.10'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    compile 'com.jcabi:jcabi-aspects:0.22.6'
    compile 'com.jfoenix:jfoenix:8.0.7' // Java 8
    implementation 'com.google.code.gson:gson:2.8.5'
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    implementation 'com.google.code.gson:gson:2.8.5'

}

apply plugin: 'com.github.johnrengelman.shadow'


class WindowsTransformer extends ServiceFileTransformer {

    void transform(String path, InputStream is, List<Relocator> relocators) {
        def lines = is.readLines()

        relocators.each {rel ->
            if (rel.canRelocateClass(new File(path).name)) {
                path = rel.relocateClass(path)
            }
            lines.eachWithIndex { String line, int i ->
                if (rel.canRelocateClass(line)) {
                    lines[i] = rel.relocateClass(line)
                }
            }
        }

        lines.each { line -> serviceEntries[path]
                .append(new ByteArrayInputStream((line + "\r\n").getBytes()))
        }
    }
}

shadowJar{
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        transform(WindowsTransformer.class)
    }
    else {
        mergeServiceFiles()
    }
}

jar {
    manifest {
        attributes(
                'Main-Class': "com.colinparrott.parallelsimulator.Launcher"
        )
    }
}
